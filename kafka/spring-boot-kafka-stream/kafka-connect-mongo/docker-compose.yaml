version: '2'

#networks:
#  kafka-local:
#    driver: bridge

services:
  #  kafdrop:
  #    image: obsidiandynamics/kafdrop:3.8.1
  #    container_name: kafdrop
  #    depends_on:
  #      - zookeeper
  #      - kafka
  #    expose:
  #      - 9000
  #    ports:
  #      - 9000:9000
  #    environment:
  #      ZOOKEEPER_CONNECT: zookeeper:2181
  #      KAFKA_BROKERCONNECT: kafka:29092
  #    networks:
  #      - kafka-local

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - 22181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  #    networks:
  #      - kafka-local

  kafka:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
  #    networks:
  #      - kafka-local

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9001:8081"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - SERVER_PORT=8081
    depends_on:
      - zookeeper
      - kafka
#    networks:
#      - kafka-local

#  kafka-connect:
#    image: confluentinc/cp-kafka-connect:5.1.0
#    hostname: kafka-connect
#    container_name: kafka-connect
#    ports:
#      - "8083:8083"
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
#      CONNECT_REST_ADVERTISED_HOST_NAME: connect
#      CONNECT_REST_PORT: 8083
#      CONNECT_GROUP_ID: compose-connect-group
#      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
#      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
#      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
#    volumes:
#      - /tmp/custom/jars:/etc/kafka-connect/jars
#    depends_on:
#      - zookeeper
#      - kafka
#    networks:
#      - kafka-local